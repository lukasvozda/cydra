type Error = variant {
    InvalidCanister;
    CanisterError : record {
        message : text;
    };
};

type Result = variant {
    Ok: text;
    Err : Error;
};

type QueryResultWithColumns = record {
    columns: vec text;
    data: vec vec text;
};

type QueryResult = variant {
    Ok: QueryResultWithColumns;
    Err : Error;
};

// New types for database information
type ColumnInfo = record {
    name: text;
    data_type: text;
    not_null: bool;
    primary_key: bool;
};

type TableInfo = record {
    table_name: text;
    row_count: nat64;
    column_count: nat32;
    schema: vec ColumnInfo;
    preview_data: vec vec text;
};

type DatabaseInfo = record {
    total_tables: nat32;
    database_size_mb: float64;
    tables: vec TableInfo;
};

type DatabaseInfoResult = variant {
    Ok: DatabaseInfo;
    Err: Error;
};

service : {
    "balance": () -> (nat64) query;
    "instruction_counter": () -> (nat64) query;
    "execute": (text) -> (Result);
    "query": (text) -> (QueryResult) query;
    "get_database_info": () -> (DatabaseInfoResult) query;
}